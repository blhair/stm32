# Memory（Mem）库说明

本库用于在 STM32 项目中记录和输出编码器速度数据，支持通过串口输出采集到的速度信息，并提供内存管理功能。

---

## 主要函数用法

### 1. SpeedMemInit

```c
void SpeedMemInit(int size, int div, UART_HandleTypeDef *huart);
```

**功能说明：**  
初始化速度数据存储结构体 `speedMem`，分配内存空间，并指定串口用于数据输出。

**参数说明：**
- `size`：每个通道（左右轮）可存储的数据点数量
- `div`：数据采样间隔（每 `div` 次采样存一次数据）
- `huart`：用于数据输出的串口句柄指针

**使用示例：**
```c
SpeedMemInit(100, 10, &huart1); // 每10次采样存一次数据，最多存100组
```

---

### 2. MemOut

```c
void MemOut(void);
```

**功能说明：**  
通过串口输出已存储的左右轮速度数据。先输出左轮，再输出右轮，每个数据以制表符分隔。

**使用示例：**
```c
MemOut(); // 调用后会通过初始化时指定的串口输出所有已采集的数据
```

---

### 3. destoryMem

```c
void destoryMem(void);
```

**功能说明：**  
释放 `speedMem` 及其内部分配的所有内存，防止内存泄漏。使用完毕后应调用。

**使用示例：**
```c
destoryMem(); // 释放内存
```

---

## 其他函数简介

- `Mem *speedMem`  
  全局指针，指向当前速度数据存储结构体。需通过 `SpeedMemInit` 初始化。

---

## 注意事项

- 使用前需包含 `Mem.h` 并确保已初始化 `speedMem`。
- `size` 和 `div` 参数需根据实际采样频率和内存大小合理设置，避免分配失败。
- 串口句柄 `huart` 需在外部初始化并配置好。
- 使用结束后请调用 `destoryMem` 释放内存，防止内存泄漏。
- 若分配内存失败（如堆空间不足），`speedMem` 会为 `NULL`，请注意检查。

---

如有疑问或需进一步扩展，请参考源码注释或联系开发者。